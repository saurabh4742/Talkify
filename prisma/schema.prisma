// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String       @id @default(uuid()) @map("_id")
  name          String?
  password      String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  imageKey      String?
  accounts      Account[]
  chat          Chat[]
  reported      UserReport[]
}

model Server {
  id       String @id @default(cuid()) @map("_id")
  name     String
  capacity Int
  chats    Chat[]
}

model Chat {
  id        String   @id @default(cuid()) @map("_id")
  server    Server   @relation(fields: [serverId], references: [id])
  serverId  String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  message   String
  createdAt DateTime @default(now())
}

model UserReport {
  id         String   @id @default(cuid()) @map("_id")
  reporter   User     @relation(fields: [reporterId], references: [id])
  reporterId String
  reportedTo String
  reason     String
  createdAt  DateTime @default(now())
}